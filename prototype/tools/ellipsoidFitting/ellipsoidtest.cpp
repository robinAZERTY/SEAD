/*
cree par : robinAZERTY
version du : 30/09/2022
*/

#include <iostream>
#include "ellipsoidFitting.cpp"

void visu()
{
    const double samples[][3] =
{{-0.03, -0.01, 0.65}, {-1.01, -1.33, -0.9}, {-1.14, -1.37, 0.61}, {-0.67, -0.68, -1.05}, {0.08, -1.37, 0.38}, {-0.85, -0.4, -0.6}, {0.11, -0.4, -0.38}, {-0.96, -1.36, -0.93}, {-0.77, -0.26, 0.74}, {0.22, -0.25, 0.12}, {-0.01, -0.34, -0.53}, {-0.37, -1.61, 0.9}, {-0.55, -0.66, 1.44}, {-0.74, -0.31, -0.61}, {-0.16, -1.04, 1.43}, {0.18, -0.34, -0.17}, {-0.34, -0.28, 1.27}, {-0.28, -0.13, 1.08}, {0.01, -1.29, -0.34}, {-1.19, -1.1, 0.57}, {-0.14, -0.12, 1.06}, {-0.59, -1.64, -0.67}, {-0.15, -1.33, -0.63}, {-1.01, -1.48, 0.79}, {-1, -1.39, 0.89}, {0.28, -0.86, 0.8}, {-1.07, -1.35, -0.81}, {-0.12, -1.41, -0.45}, {-0.92, -0.35, -0.28}, {-0.27, -1.32, -0.81}, {-0.05, -1.2, -0.6}, {-1.01, -1.56, 0.68}, {-1.19, -1.56, -0.04}, {-0.24, -1.18, 1.39}, {0.18, -0.85, -0.31}, {0.05, -0.64, 1.37}, {-1.14, -1.37, -0.67}, {-0.67, -1.54, 1.05}, {-0.42, 0.01, 0.03}, {-0.06, -1.52, 0.5}, {-0.78, -1.83, 0.22}, {-0.65, -0.99, 1.41}, {0.11, -0.07, 0.46}, {0.18, -0.66, -0.35}, {-1.07, -1.02, -0.87}, {-0.36, -1.68, 0.7}, {-1.12, -0.65, -0.35}, {0.17, -1.02, 1.01}, {-0.93, -0.88, 1.11}, {-0.66, -1.72, -0.56}, {0.06, -0.27, -0.33}, {-0.44, -1.74, -0.27}, {-1.08, -1.68, -0.26}, {-1.12, -1.64, 0.13}, {-0.85, -0.53, -0.81}, {-0.44, -0.17, -0.56}, {-0.03, -1.2, -0.55}, {-0.99, -0.48, -0.47}, {-0.45, -0.09, -0.37}, {-0.2, 0, 0.75}, {0, -0.15, -0.25}, {-0.29, -1.21, 1.39}, {-1, -0.85, -0.89}, {-0.13, -1.3, -0.63}, {-0.07, -1.52, 0.58}, {0, -1.25, 1.07}, {-0.43, -1.54, -0.71}, {-0.77, -0.16, 0.31}, {-1.06, -0.95, -0.85}, {0.13, -0.49, 1.24}, {-1.08, -1.16, 0.84}, {-0.18, -1.49, 0.94}, {0.11, -1.18, -0.2}, {0.01, -0.78, -0.69}, {-0.1, -0.41, 1.38}, {0.27, -0.63, 0.94}, {-0.53, -0.3, -0.74}, {0.17, -1.21, 0.31}, {-0.06, -0.08, -0.18}, {-0.95, -0.84, -0.95}, {-0.86, -1.05, -1.08}, {0, -0.13, 0.99}, {-0.43, -0.25, -0.69}, {-1.06, -1.56, 0.57}, {-0.9, -0.55, 0.93}, {-1.22, -1.43, 0.25}, {-0.18, 0.02, 0.05}, {0.2, -1.12, 0.67}, {-1.02, -0.63, -0.65}, {-1.25, -1.4, -0.21}, {0.29, -0.37, 0.68}, {-0.42, -0.33, -0.79}, {-0.21, -1.56, 0.83}, {-0.74, -1.41, 1.15}, {-0.54, -0.61, 1.42}, {0.05, -0.08, 0.04}, {-1.24, -1.4, -0.25}, {0.24, -1.07, 0.41}, {-0.87, -0.3, 0.53}, {-0.98, -1.43, 0.89}};
    /*
    should give:
    A = {{0.77, 0.22, 0},{0.02, 0.94, -0.13},{0.19, 0.31, 1.28}}
    B = (-0.47296, -0.89519, 0.2)
    */

    const int nSamples = sizeof(samples) / sizeof(samples[0]);

    // create a ellipsoid
    Ellipsoid ellipsoid;
    ellipsoid.points = (double *)samples;
    ellipsoid.n = nSamples;

    std::cout << ellipsoid.n << " samples" << std::endl;

    // find the best A and B
    std::cout << "iteration = " << ellipsoid.fit()[12] << std::endl;
    // print the parameters
    std::cout << ellipsoid.A.to_str() << std::endl;
    std::cout << ellipsoid.B.to_str() << std::endl;
    std::cout << "minimum cost = " << ellipsoid.minimum_cost << std::endl;
}

int main()
{
    visu();
    return 0;
}