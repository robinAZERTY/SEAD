/*
cree par : robinAZERTY
version du : 30/09/2022
*/

#include <iostream>
#include "ellipsoidFitting.cpp"

void visu()
{
    const double samples[][3] =
   {{-1.2179,    7.3329,  -28.0348},
   {-1.1365,   11.0034,  -28.3466},
   {-6.4231,    5.7952,  -22.1035},
   {-1.0354,   11.4962,  -27.8789},
   {-4.9215,    3.7252,  -25.1927},
   {-3.1967,   13.2335,  -28.5769},
   {-1.1705,   12.5662,  -20.8341},
   {-7.0019,    6.3328,  -28.4378},
   {-1.7729,    4.8972,  -25.2568},
   {-2.4744,    5.7194,  -19.9873},
   {-3.7453,    3.9927,  -22.5798},
   {-5.6051,    5.7833,  -20.8162},
   { 0.1578,   10.2247,  -24.3781},
   {-5.7378,   10.4118,  -30.5054},
   {-2.8585,    5.6830,  -19.8272},
   {-1.1957,   10.2416,  -28.6991},
   {-1.3021,   12.2130,  -27.7705},
   {-1.7101,    8.4731,  -29.3910},
   {-4.3251,    4.6835,  -28.5652},
   {-1.0381,    7.1391,  -27.4766},
   {-6.2680,    4.4557,  -25.9837},
   {-2.0012,    5.6342,  -27.6854},
   {-7.2443,    7.1475,  -23.0783},
   {-1.8475,    5.8409,  -27.6961},
   {-2.7145,   12.7585,  -20.0137},
   { 0.0070,   11.2849,  -22.8339},
   {-5.9449,    4.6644,  -27.7688},
   {-1.4017,    8.3209,  -19.0358},
   {-3.4032,    8.1159,  -30.8175},
   {-0.4549,    6.6778,  -23.8303},
   {-3.3845,   14.2990,  -23.4460},
   {-0.3549,    7.0831,  -24.7756},
   {-3.3325,   14.4061,  -24.6686},
   {-7.3893,    9.9566,  -27.7745},
   {-2.1681,   14.1717,  -24.9058},
   {-6.7220,   12.0753,  -25.9236},
   {-5.9123,   12.3174,  -22.3788},
   {-3.6064,    3.7412,  -24.8603},
   {-1.7943,    5.5218,  -27.0754},
   {-0.2378,   11.1565,  -21.3055},
   {-5.8192,    9.7323,  -20.0936},
   {-1.2312,    6.8437,  -27.6311},
   {-4.8666,    7.1286,  -30.8082},
   {-0.9738,   12.6374,  -21.2991},
   {-1.8753,   13.8491,  -25.8627},
   {-5.2632,    3.9016,  -24.0641},
   {-5.4358,    3.9172,  -25.7700},
   {-3.5757,   14.3447,  -23.9493},
   {-3.9200,   11.5531,  -30.3985},
   {-0.8459,    6.1018,  -22.4662},
   {-5.0109,    9.4136,  -19.1337},
   {-0.8513,    6.3513,  -25.7784},
   {-1.8876,   12.8145,  -28.0029},
   {-1.0879,    9.8283,  -28.5740},
   {-1.3636,   10.4969,  -28.9022},
   {-2.5337,    7.8140,  -30.1086},
   {-5.5346,    5.6605,  -29.6158},
   {-0.4216,    7.1912,  -25.4666},
   {-5.5768,    6.0554,  -20.5518},
   {-3.4863,   13.0824,  -28.8847},
   {-5.9713,   11.6386,  -21.5714},
   {-4.8690,    8.0295,  -31.0963},
   {-6.5479,    9.5979,  -29.9991},
   {-5.5015,   12.0427,  -21.2016},
   {-2.0139,    5.1682,  -21.3274},
   {-3.0029,   12.9657,  -20.2652},
   {-0.7601,   12.7370,  -25.5893},
   {-3.6251,    8.5497,  -30.9987},
   {-4.0236,   13.9339,  -27.2193},
   {-2.1709,    4.5257,  -23.0438},
   {-7.4336,    6.4640,  -24.8254},
   {-4.3453,    8.1786,  -18.6714},
   {-4.9641,   13.7820,  -23.8908},
   {-3.9484,   12.9911,  -29.0563},
   {-4.1979,   11.7488,  -30.2823},
   {-0.3434,    8.3558,  -26.4783},
   {-5.3426,   12.6516,  -28.8194},
   {-4.2655,    9.2007,  -18.5903},
   {-4.6345,   14.0224,  -25.9931},
   {-1.4053,    7.0771,  -19.6875},
   {-0.3178,   11.9337,  -25.3052},
   {-0.5588,   11.2093,  -26.9847},
   {-0.4534,   11.3948,  -20.8978},
   {-2.8575,   14.3528,  -23.8781},
   {-2.0261,    4.9058,  -26.2534},
   {-2.8540,   11.3480,  -30.1066},
   {-3.0079,    9.8874,  -18.3221},
   {-7.6693,    9.0129,  -26.9869},
   {-2.5418,   10.8478,  -30.1096},
   {-1.0918,    6.3945,  -26.7131},
   {-3.5223,    8.3352,  -18.3560},
   {-0.3412,    7.0265,  -22.7745},
   {-7.2575,   10.5173,  -27.6235},
   {-6.9904,    5.4435,  -24.6331},
   {-2.9466,    7.7650,  -30.4317},
   {-6.7995,    7.0378,  -29.4079},
   {-1.7063,    5.0181,  -25.4898},
   {-2.6188,   11.7355,  -29.7163},
   {-6.0405,    8.9501,  -30.6596},
   {-2.4426,    7.0238,  -18.9112}};

   /*
   A =

    3.8601    0.5065    0.8428
    0.1689    5.3403   -0.6007
   -0.2136    0.8052    6.4264


    B =

    -3.7705
     9.0309
    -24.7297
  */

    const int nSamples = sizeof(samples) / sizeof(samples[0]);

    // create a ellipsoid
    Ellipsoid ellipsoid;
    ellipsoid.points = (double *)samples;
    ellipsoid.n = nSamples;

    std::cout << ellipsoid.n << " samples" << std::endl;
    //ellipsoid.fit_basic();
    // find the best A and B
    std::cout << "iteration1 = " << ellipsoid.fit_grad_descent()[12] << std::endl;
    std::cout << "iteration2 = " << ellipsoid.rotation_optimization()[4] << std::endl;
    // print the parameters
    std::cout << ellipsoid.A.to_str() << std::endl;
    std::cout << ellipsoid.B.to_str() << std::endl;
    std::cout << "minimum cost = " << ellipsoid.minimum_cost << std::endl;
    std::cout << "minimum rotation cost = " << ellipsoid.minimum_rotation_cost << std::endl;
}

int main()
{
    visu();
    return 0;
}