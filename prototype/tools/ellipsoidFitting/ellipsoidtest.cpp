/*
cree par : robinAZERTY
version du : 30/09/2022
*/

#include <iostream>
#include "ellipsoidFitting.cpp"

void visu()
{
    const double samples[][3] =
   {{ 5.3797,   -4.6931,    6.8115},
   {-5.3671,    2.0153,    7.6905},
   {-7.7104,   -3.9444,   -3.9427},
   {-5.0753,   -4.6385,    6.6549},
   { 0.4740,    4.9223,   -7.7958},
   { 6.8518,    7.3685,    2.4719},
   {-0.2728,    6.7098,    6.9273},
   { 0.8511,    6.5899,   -7.1846},
   {-0.1370,    5.5759,    7.7233},
   { 2.6431,    9.4481,    1.8772},
   { 1.2688,   -4.0882,   -8.3090},
   {-3.4160,    0.8952,   -8.4828},
   { 5.8726,    3.0370,   -6.7418},
   { 6.4633,    2.4576,    6.7470},
   {-5.8798,   -7.8975,    0.6486},
   { 5.8266,    5.2153,   -5.7483},
   {-5.4050,    0.1963,   -7.5446},
   {-6.3166,   -5.8399,   -3.8395},
   { 1.0070,    6.0519,   -7.3790},
   { 5.8147,   -1.3774,    6.8695},
   { 0.0182,   -6.7017,    6.7794},
   {-6.8785,    6.0993,   -3.7145},
   {-1.6919,    6.4542,   -6.9271},
   { 7.3697,   -5.4847,    4.3185},
   {-6.3264,    5.7909,   -4.5310},
   { 5.3581,    0.2793,   -8.0524},
   { 6.3927,    7.0311,   -2.7332},
   {-6.4407,   -7.0397,   -1.1834},
   {-9.3253,   -2.8571,    0.1807},
   {-0.2639,    9.1600,    4.1438},
   {-4.2525,    3.4306,    7.5874},
   { 4.1047,    8.2154,    3.4110},
   { 0.6821,   -7.8338,    5.4394},
   { 1.9283,   -6.7383,    5.9718},
   {-4.0961,    0.6909,   -8.3378},
   { 5.8638,    3.5975,    6.3656},
   {-6.9955,   -6.3431,   -1.5344},
   {10.1646,   -1.9536,    1.0728},
   {-2.0341,    0.0322,   -8.8474},
   {-8.1148,    1.5872,    5.3824},
   { 9.9491,   -0.1811,   -0.3847},
   {-1.7770,   -9.4355,   -3.0337},
   {-9.5388,    2.1720,    0.6595},
   { 7.9207,    0.9347,    5.2931},
   {-9.3833,   -0.5539,    3.3218},
   {-2.4477,   -7.0342,    5.7866},
   { 4.1638,    2.2646,    8.0308},
   { 8.3543,    4.6787,    1.7563},
   {-6.9775,   -6.7740,   -0.8772},
   {-7.5488,    4.8878,    4.5487},
   {-7.6238,    4.5644,   -4.3744},
   {-9.3888,   -2.1586,   -1.5812},
   { 7.1378,    3.6612,    4.9790},
   {-8.1074,   -3.5337,    4.1319},
   { 4.6700,   -8.2032,    3.0378},
   {-2.8398,    9.6634,   -2.4229},
   {-4.5435,   -5.9563,   -5.7262},
   { 6.4108,    7.4995,   -1.1337},
   { 4.3388,   -6.3330,    5.6622},
   { 3.4652,   -6.4782,   -6.3641},
   { 0.2886,   -2.7901,   -8.4767},
   { 6.5514,   -3.7717,    5.3609},
   {-9.1715,    3.2071,   -2.5132},
   {-2.0302,   -7.9048,   -4.9497},
   {-3.6019,   -7.0626,    6.0690},
   {-5.1489,    3.6514,   -7.3654},
   { 7.6953,   -4.9302,   -4.6680},
   { 5.0879,   -5.9748,    5.5122},
   { 0.9001,    9.1999,   -3.5488},
   {-8.5634,   -3.3634,    4.0061},
   {-9.5220,    0.3371,    3.5663},
   { 8.5233,   -3.0082,   -4.0053},
   { 8.0486,    0.6656,   -5.6701},
   {-3.2085,    8.4303,   -4.1336},
   { 7.2014,   -1.6420,   -6.1590},
   { 5.4257,   -7.4165,   -4.4741},
   { 5.1435,    3.5152,   -6.8123},
   { 9.4060,    2.4034,    0.7282},
   { 8.0226,   -5.1786,    2.8492},
   {-9.2736,   -3.0060,   -0.8269},
   { 5.5047,   -8.2156,   -0.1993},
   {-1.8207,    4.2599,    8.5046},
   {-7.6991,   -0.7796,   -5.2836},
   { 2.3243,    6.9628,    6.0290},
   { 9.2617,    0.6012,   -3.7894},
   { 9.0051,   -3.2142,    2.4910},
   {-9.3061,   -1.7284,   -0.0993},
   { 3.8839,    2.6472,   -7.7061},
   {-9.5400,    3.3456,   -0.0846},
   { 0.0339,   -9.3951,    2.5912},
   {-9.1401,   -1.6065,   -1.7978},
   { 8.2091,   -4.0232,   -4.4763},
   {-7.8145,    6.3593,    2.1605},
   { 5.1805,    8.1659,   -1.5605},
   { 5.8039,   -8.1758,   -2.5460},
   { 2.3867,    3.6548,   -8.1079},
   { 6.2183,   -7.9895,    0.0674},
   { 5.4439,   -8.0701,    2.1792},
   {-4.5908,    0.7414,    8.3514},
   { 1.4131,   -8.7231,    4.6829}};


   /*
A =

   10.0030   -0.1076   -0.1604
   -0.2330   10.0319    0.1059
   -0.1847   -0.0421    9.1283


B =

    0.0619
    0.0991
    0.0585
  */

    const int nSamples = sizeof(samples) / sizeof(samples[0]);

    // create a ellipsoid
    Ellipsoid ellipsoid;
    ellipsoid.points = (double *)samples;
    ellipsoid.n = nSamples;

    std::cout << ellipsoid.n << " samples" << std::endl;
    //ellipsoid.fit_basic();
    // find the best A and B
    std::cout << "iteration1 = " << ellipsoid.fit_grad_descent(0.015)[12] << std::endl;
    // print the parameters
    std::cout << ellipsoid.A.to_str() << std::endl;
    std::cout << ellipsoid.B.to_str() << std::endl;
    std::cout << "minimum cost = " << ellipsoid.minimum_cost << std::endl;
    std::cout << "average distance = " << sqrt(ellipsoid.minimum_cost) << std::endl;
}

int main()
{
    visu();
    return 0;
}